{
  "name": "ETL - AXA",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1376,
        544
      ],
      "id": "0cf069d4-1478-47f0-ab18-0c196258e416",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "jsCode": "// ETL AXA - NORMALIZACIÓN CORREGIDA v2.0\n// Fecha: 2025-08-25\n// Cambios: Modelo viene correcto del query, solo normalizar versión\n\nconst crypto = require('crypto');\nconst ASEGURADORA = 'AXA';\n\n// ==================================================\n// DICCIONARIO DE MARCAS CANÓNICAS\n// ==================================================\nconst MARCAS_CANONICAS = {\n    'MERCEDES-BENZ': ['MERCEDES', 'MERCEDES BENZ', 'BENZ', 'MB'],\n    'BMW': ['BMW', 'BAYERISCHE MOTOREN WERKE'],\n    'AUDI': ['AUDI', 'AU'],\n    'VOLKSWAGEN': ['VW', 'VOLKS', 'VOLKSWAGON', 'V.W.'],\n    'CHEVROLET': ['CHEVY', 'CHEV', 'CHEVROLET'],\n    'FORD': ['FORD', 'FD'],\n    'TOYOTA': ['TOYOTA', 'TOY'],\n    'NISSAN': ['NISSAN', 'DATSUN'],\n    'HONDA': ['HONDA', 'HON'],\n    'MAZDA': ['MAZDA', 'MAZ'],\n    'KIA': ['KIA MOTORS', 'KIA'],\n    'HYUNDAI': ['HYUNDAI', 'HYU'],\n    'MITSUBISHI': ['MITSU', 'MITSUBISHI'],\n    'JEEP': ['JEEP', 'JP'],\n    'GMC': ['GMC', 'GENERAL MOTORS'],\n    'ALFA ROMEO': ['ALFA', 'ALFA ROMEO'],\n    'LAND ROVER': ['LAND ROVER', 'ROVER'],\n    'MINI': ['MINI COOPER', 'MINI'],\n    'SEAT': ['SEAT', 'ST'],\n    'PEUGEOT': ['PEUGEOT', 'PEU'],\n    'RENAULT': ['RENAULT', 'REN'],\n    'FIAT': ['FIAT', 'FT'],\n    'CHRYSLER': ['CHRYSLER', 'CHRYS'],\n    'DODGE': ['DODGE', 'RAM'],\n    'LINCOLN': ['LINCOLN', 'LINC'],\n    'CADILLAC': ['CADILLAC', 'CADDY'],\n    'INFINITI': ['INFINITI', 'INF'],\n    'ACURA': ['ACURA', 'ACU'],\n    'LEXUS': ['LEXUS', 'LEX'],\n    'SUBARU': ['SUBARU', 'SUB'],\n    'SUZUKI': ['SUZUKI', 'SUZ'],\n    'PORSCHE': ['PORSCHE', 'POR'],\n    'JAGUAR': ['JAGUAR', 'JAG'],\n    'VOLVO': ['VOLVO', 'VOL'],\n    'TESLA': ['TESLA', 'TSL'],\n    'MASERATI': ['MASERATI', 'MAS'],\n    'FERRARI': ['FERRARI', 'FER'],\n    'LAMBORGHINI': ['LAMBORGHINI', 'LAMBO']\n};\n\nconst MAPA_TRANSMISIONES = {\n    'Manual': 'MANUAL',\n    'Automática': 'AUTO',\n    'No especificada': 'NO_ESPECIFICADA'\n};\n\n// ==================================================\n// FUNCIONES DE NORMALIZACIÓN\n// ==================================================\n\nfunction normalizarMarca(marca) {\n    if (!marca || marca.trim() === '') return 'MARCA_DESCONOCIDA';\n    \n    const marcaUpper = marca.toUpperCase().trim();\n    \n    // Buscar en el diccionario\n    for (const [canonical, variations] of Object.entries(MARCAS_CANONICAS)) {\n        if (variations.some(v => marcaUpper === v || marcaUpper.includes(v))) {\n            return canonical;\n        }\n    }\n    \n    return marcaUpper;\n}\n\nfunction normalizarTexto(texto) {\n    if (!texto || texto.trim() === '') return '';\n    \n    return texto\n        .toUpperCase()\n        .trim()\n        .replace(/\\s+/g, ' ')\n        .replace(/[^\\w\\s\\-]/g, '')\n        .trim();\n}\n\n// FUNCIÓN CRÍTICA: Extraer y normalizar versión\nfunction extraerVersionReal(versionCorta) {\n    if (!versionCorta || versionCorta === 'STANDARD') return 'STANDARD';\n    \n    let desc = versionCorta.toUpperCase().trim();\n    \n    // PRIMERO: Normalizar versiones multi-palabra a formato con guión\n    // IMPORTANTE: Hacer esto ANTES de limpiar para preservar los patrones\n    const normalizaciones = [\n        { buscar: /\\bA SPEC\\b/g, reemplazar: 'A-SPEC' },\n        { buscar: /\\bA-SPEC\\b/g, reemplazar: 'A-SPEC' },  // Ya normalizado\n        { buscar: /\\bTYPE S\\b/g, reemplazar: 'TYPE-S' },\n        { buscar: /\\bTYPE-S\\b/g, reemplazar: 'TYPE-S' },\n        { buscar: /\\bTYPE R\\b/g, reemplazar: 'TYPE-R' },\n        { buscar: /\\bTYPE-R\\b/g, reemplazar: 'TYPE-R' },\n        { buscar: /\\bS LINE\\b/g, reemplazar: 'S-LINE' },\n        { buscar: /\\bS-LINE\\b/g, reemplazar: 'S-LINE' },\n        { buscar: /\\bRS LINE\\b/g, reemplazar: 'RS-LINE' },\n        { buscar: /\\bRS-LINE\\b/g, reemplazar: 'RS-LINE' },\n        { buscar: /\\bR LINE\\b/g, reemplazar: 'R-LINE' },\n        { buscar: /\\bR-LINE\\b/g, reemplazar: 'R-LINE' },\n        { buscar: /\\bAMG LINE\\b/g, reemplazar: 'AMG-LINE' },\n        { buscar: /\\bAMG-LINE\\b/g, reemplazar: 'AMG-LINE' },\n        { buscar: /\\bM SPORT\\b/g, reemplazar: 'M-SPORT' },\n        { buscar: /\\bM-SPORT\\b/g, reemplazar: 'M-SPORT' },\n        { buscar: /\\bM PERFORMANCE\\b/g, reemplazar: 'M-PERFORMANCE' },\n        { buscar: /\\bBLACK LABEL\\b/g, reemplazar: 'BLACK-LABEL' },\n        { buscar: /\\bGRAND TOURING\\b/g, reemplazar: 'GRAND-TOURING' },\n        { buscar: /\\bJOHN COOPER WORKS\\b/g, reemplazar: 'JOHN-COOPER-WORKS' },\n        { buscar: /\\bLAUNCH EDITION\\b/g, reemplazar: 'LAUNCH-EDITION' },\n        { buscar: /\\bFIRST EDITION\\b/g, reemplazar: 'FIRST-EDITION' },\n        { buscar: /\\bSPECIAL EDITION\\b/g, reemplazar: 'SPECIAL-EDITION' },\n        { buscar: /\\bSPECIAL ED\\b/g, reemplazar: 'SPECIAL-EDITION' },\n        { buscar: /\\bLIMITED EDITION\\b/g, reemplazar: 'LIMITED-EDITION' },\n        { buscar: /\\bR DYNAMIC\\b/g, reemplazar: 'R-DYNAMIC' },\n        { buscar: /\\bR-DYNAMIC\\b/g, reemplazar: 'R-DYNAMIC' },\n        { buscar: /\\b30 A[ÑN]OS\\b/g, reemplazar: '30-AÑOS' },\n        { buscar: /\\b10 ANIVERSARIO\\b/g, reemplazar: '10-ANIVERSARIO' },\n        { buscar: /\\bS LINE PLUS\\b/g, reemplazar: 'S-LINE-PLUS' },\n        { buscar: /\\bS-LINE PLUS\\b/g, reemplazar: 'S-LINE-PLUS' }\n    ];\n    \n    // Aplicar normalizaciones\n    for (let norm of normalizaciones) {\n        desc = desc.replace(norm.buscar, norm.reemplazar);\n    }\n    \n    // SEGUNDO: Remover información técnica\n    const infoTecnica = [\n        /\\bAUT\\b/g,            // AUT\n        /\\bSTD\\b/g,            // STD\n        /\\bCVT\\b/g,            // CVT\n        /\\bDCT\\b/g,            // DCT\n        /\\bDSG\\b/g,            // DSG\n        /\\bSTRONIC\\b/g,        // STRONIC\n        /\\bTIPTRONIC\\b/g,      // TIPTRONIC\n        /\\bMULTITRONIC\\b/g,    // MULTITRONIC\n        /\\bQUATTRO\\b/g,        // QUATTRO\n        /\\b\\d+P\\b/g,           // 2P, 3P, 4P, 5P\n        /\\b\\d+CIL\\b/g,         // 4CIL, 6CIL, 8CIL\n        /\\b\\d+\\.\\d+L?\\b/g,     // 1.4, 2.0L, 3.2L\n        /\\bL\\d+\\b/g,           // L4, L6\n        /\\b4X4\\b/g,            // 4X4\n        /\\b4X2\\b/g,            // 4X2\n        /\\b4WD\\b/g,            // 4WD\n        /\\bAWD\\b/g,            // AWD\n        /\\bFWD\\b/g,            // FWD\n        /\\bRWD\\b/g,            // RWD\n        /\\bPIEL\\b/g,           // PIEL\n        /\\bTELA\\b/g,           // TELA\n        /\\bAC\\b/g,             // AC\n        /\\bQC\\b/g,             // QC\n        /\\bBA\\b/g,             // BA\n        /\\bCD\\b/g,             // CD\n        /\\bTURBO\\b/g,          // TURBO\n        /\\bTFSI\\b/g,           // TFSI\n        /\\bMHEV\\b/g,           // MHEV\n        /\\bHYBRID\\b/g,         // HYBRID\n        /\\bHIBRIDO\\b/g,        // HIBRIDO\n        /\\bPASAJEROS\\b/g,      // PASAJEROS\n        /\\bGENERICA\\b/g,       // GENERICA\n        /\\b\\d+ PASAJEROS\\b/g,  // 4 PASAJEROS\n        /\\bMILD HYBRID\\b/g     // MILD HYBRID\n    ];\n    \n    // Limpiar información técnica\n    let limpio = desc;\n    for (let pattern of infoTecnica) {\n        limpio = limpio.replace(pattern, ' ');\n    }\n    \n    // Limpiar espacios múltiples\n    limpio = limpio.replace(/\\s+/g, ' ').trim();\n    \n    // Si después de limpiar queda algo significativo, retornarlo\n    if (limpio && limpio.length > 1) {\n        // Verificar si es una versión conocida que ya normalizamos\n        const versionesNormalizadas = [\n            'A-SPEC', 'TYPE-S', 'TYPE-R', 'S-LINE', 'S-LINE-PLUS', \n            'RS-LINE', 'R-LINE', 'AMG-LINE', 'M-SPORT', 'M-PERFORMANCE',\n            'BLACK-LABEL', 'GRAND-TOURING', 'JOHN-COOPER-WORKS',\n            'LAUNCH-EDITION', 'FIRST-EDITION', 'SPECIAL-EDITION',\n            'LIMITED-EDITION', 'R-DYNAMIC', '30-AÑOS', '10-ANIVERSARIO'\n        ];\n        \n        // Si encontramos una versión normalizada, retornarla\n        for (let version of versionesNormalizadas) {\n            if (limpio.includes(version)) {\n                return version;\n            }\n        }\n        \n        // Buscar versiones simples conocidas\n        const versionesSimples = [\n            'RS', 'SPORT', 'ELITE', 'LUXURY', 'PREMIUM', 'EXCLUSIVE',\n            'ATTRACTION', 'AMBIENTE', 'AMBITION', 'ADVANCE', 'TECH',\n            'COMFORT', 'DYNAMIC', 'DESIGN', 'STYLE', 'SELECT',\n            'EGO', 'ENVY', 'COUPE', 'ROADSTER', 'SPORTBACK',\n            'CABRIOLET', 'AVANT', 'ALLROAD', 'BASEBALL', 'FRONT'\n        ];\n        \n        for (let version of versionesSimples) {\n            if (limpio === version || limpio.startsWith(version + ' ')) {\n                return version;\n            }\n        }\n        \n        // Si queda algo después de limpiar, tomar la primera palabra\n        const palabras = limpio.split(' ').filter(p => p.length > 1);\n        if (palabras.length > 0) {\n            return palabras[0];\n        }\n    }\n    \n    return 'STANDARD';\n}\n\n// Función para normalizar transmisión\nfunction normalizarTransmision(transmisionDesc, transmisionCodigo, versionCompleta, versionCorta) {\n    // Primero intentar con el código si es confiable\n    if (transmisionCodigo === 1) return 'MANUAL';\n    if (transmisionCodigo === 2) return 'AUTO';\n    \n    // Si hay descripción válida\n    if (transmisionDesc && transmisionDesc !== 'No especificada') {\n        return MAPA_TRANSMISIONES[transmisionDesc] || 'NO_ESPECIFICADA';\n    }\n    \n    // Intentar detectar desde las descripciones\n    const textoCompleto = `${versionCompleta || ''} ${versionCorta || ''}`.toUpperCase();\n    \n    // Patrones de transmisión manual\n    if (textoCompleto.match(/\\b(STD|TM|MT|MANUAL|MAN)\\b/) && \n        !textoCompleto.match(/\\b(AUT|AUTO|TA|AT|CVT|DCT|DSG|STRONIC|TIPTRONIC|MULTITRONIC)\\b/)) {\n        return 'MANUAL';\n    }\n    \n    // Patrones de transmisión automática\n    if (textoCompleto.match(/\\b(AUT|AUTO|TA|AT|CVT|DCT|DSG|TIPTRONIC|STRONIC|MULTITRONIC)\\b/)) {\n        return 'AUTO';\n    }\n    \n    return 'NO_ESPECIFICADA';\n}\n\n// Función para generar hash único\nfunction generarHash(...componentes) {\n    const textoHash = componentes\n        .map(c => String(c || '').toUpperCase().trim())\n        .filter(c => c !== '')\n        .join('|');\n    \n    if (textoHash === '') {\n        return crypto\n            .createHash('sha256')\n            .update(`EMPTY_${Date.now()}_${Math.random()}`, 'utf8')\n            .digest('hex');\n    }\n    \n    return crypto\n        .createHash('sha256')\n        .update(textoHash, 'utf8')\n        .digest('hex');\n}\n\n// ==================================================\n// PROCESAMIENTO PRINCIPAL AXA\n// ==================================================\nconst items = $input.all();\nconst registros = [];\nconst fechaProceso = new Date().toISOString();\n\n// Estadísticas\nlet stats = {\n    total: 0,\n    procesados: 0,\n    rechazados: 0,\n    sinModelo: 0,\n    sinTransmision: 0\n};\n\nfor (const item of items) {\n    const data = item.json;\n    stats.total++;\n    \n    // Validaciones básicas\n    if (!data.marca || !data.año || data.año < 2000 || data.año > 2026) {\n        stats.rechazados++;\n        continue;\n    }\n    \n    // Validar que tengamos modelo\n    if (!data.modelo || data.modelo.startsWith('MODELO_')) {\n        stats.sinModelo++;\n        continue;\n    }\n    \n    // Normalización de marca\n    const marcaNormalizada = normalizarMarca(data.marca);\n    \n    // IMPORTANTE: El modelo ya viene correcto del query, solo normalizar texto\n    const modeloNormalizado = normalizarTexto(data.modelo);\n    \n    // CRÍTICO: Extraer versión desde version_corta (que ya no tiene el modelo)\n    const versionNormalizada = extraerVersionReal(data.version_corta);\n    \n    // Normalización de transmisión\n    const transmisionNormalizada = normalizarTransmision(\n        data.transmision_descripcion,\n        data.transmision_codigo,\n        data.version_completa,\n        data.version_corta\n    );\n    \n    if (transmisionNormalizada === 'NO_ESPECIFICADA') {\n        stats.sinTransmision++;\n    }\n    \n    // Generar hash único\n    const hashUnico = generarHash(\n        marcaNormalizada,\n        modeloNormalizado,\n        data.año,\n        versionNormalizada,\n        transmisionNormalizada\n    );\n    \n    // Estructura de salida consistente con otros ETL\n    const registro = {\n        // Campos principales\n        hash_unico: hashUnico,\n        marca: data.marca,\n        modelo: data.modelo,  // Modelo original del query\n        año: data.año,\n        version: data.version_completa,\n        version_corta: data.version_corta || null,\n        transmision_codigo: data.transmision_codigo,\n        transmision_descripcion: data.transmision_descripcion,\n        transmision_normalizada: transmisionNormalizada,\n        transmision_original: data.transmision_original,\n        transmision_detectada_desc: data.transmision_detectada_desc === 1,\n        \n        // Campos normalizados - CRÍTICOS PARA HASH\n        marca_normalizada: marcaNormalizada,\n        modelo_normalizado: modeloNormalizado,\n        version_normalizada: versionNormalizada,\n        version_corta_normalizada: versionNormalizada,\n        \n        // IDs de catálogo\n        catalogo_marca_id: data.catalogo_marca_id,\n        catalogo_modelo_id: data.catalogo_modelo_id,\n        catalogo_version_id: data.catalogo_version_id || null,\n        \n        // Metadatos\n        origen_carga: 'etl_axa_batch',\n        fecha_proceso: fechaProceso,\n        \n        // Datos específicos de aseguradora\n        aseguradora_data: {\n            aseguradora: 'AXA',\n            id_original: data.id_original,\n            activo: data.activo !== undefined ? data.activo : 1,\n            fecha_actualizacion: data.fecha_actualizacion,\n            transmision_original: data.transmision_original,\n            transmision_detectada_automaticamente: data.transmision_detectada_desc === 1\n        },\n        \n        // Componentes del hash - CRÍTICO para homologación\n        hash_components: {\n            marca: marcaNormalizada,\n            modelo: modeloNormalizado,\n            año: data.año ? data.año.toString() : 'SIN_AÑO',\n            version: versionNormalizada,\n            transmision: transmisionNormalizada\n        }\n    };\n    \n    registros.push(registro);\n    stats.procesados++;\n}\n\n// Retornar en formato n8n correcto\nreturn registros.map(registro => ({ json: registro }));"
      },
      "id": "743a376b-18fb-4a6b-ac2a-0415a2b1f6a9",
      "name": "Normalize Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -784,
        544
      ]
    },
    {
      "parameters": {
        "jsCode": "// Nodo: Deduplicate Source Data\nconst items = $input.all();\nconst seen = new Map();\n\nfor (const item of items) {\n  const key = `${item.json.marca}|${item.json.modelo}|${item.json.año}|${item.json.version_completa}`;\n  \n  if (!seen.has(key) || item.json.fecha_actualizacion > seen.get(key).json.fecha_actualizacion) {\n    seen.set(key, item);\n  }\n}\n\nreturn Array.from(seen.values());"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -976,
        544
      ],
      "id": "680aef33-1b17-401b-b889-9f3f0ea7e856",
      "name": "Deduplicate data"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- =====================================================\n-- QUERY DE EXTRACCIÓN PARA AXA\n-- Solo registros ACTIVOS (99.94% = ~14,244)\n-- IMPORTANTE: Años duales (inicial y final)\n-- =====================================================\n\nSELECT \n    'AXA' as origen_aseguradora,\n    l.ID as id_original,\n    m.Descripcion as marca,\n    v.Version as modelo,\n    l.AnoInicial as anio, -- Decisión: usar año inicial\n    l.DescripcionLinea as version_original,\n    CASE \n        WHEN l.Transmision = 1 THEN 'MANUAL'\n        WHEN l.Transmision = 2 THEN 'AUTO'\n        ELSE NULL\n    END as transmision,\n    l.Activo as activo\nFROM axa.Linea l\nINNER JOIN axa.Versiones v ON l.VersionSecClave = v.VersionSecClave\nINNER JOIN axa.Marca m ON v.MarcaClave = m.Clave\nWHERE \n    l.Activo = 1\n    AND l.AnoInicial BETWEEN 2000 AND 2030\nORDER BY m.Descripcion, v.Version, l.AnoInicial"
      },
      "id": "73145a2e-63de-4e63-98d4-8a94ee308ed8",
      "name": "Extract AXA Data",
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1,
      "position": [
        -1184,
        544
      ],
      "credentials": {
        "microsoftSql": {
          "id": "LxcRbE0XllWrNCsR",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Nodo: Deduplicate by Hash - CRÍTICO para evitar duplicados\nconst items = $input.all();\nconst uniqueByHash = new Map();\nconst duplicates = new Map();\n\n// Procesar todos los items\nitems.forEach(item => {\n  const hash = item.json.hash_unico;\n  \n  if (!hash) {\n    return;\n  }\n  \n  if (uniqueByHash.has(hash)) {\n    // Contar duplicados\n    if (!duplicates.has(hash)) {\n      duplicates.set(hash, [uniqueByHash.get(hash)]);\n    }\n    duplicates.set(hash, [...duplicates.get(hash), item]);\n  } else {\n    uniqueByHash.set(hash, item);\n  }\n});\n\n// Reportar duplicados encontrados\nif (duplicates.size > 0) {  \n  // Mostrar ejemplos de duplicados\n  let exampleCount = 0;\n  for (const [hash, items] of duplicates.entries()) {\n    if (exampleCount >= 5) break;\n    \n    console.log(`\\n🔍 Hash duplicado: ${hash.substring(0, 16)}...`);\n    console.log(`   Registros: ${items.length}`);\n    \n    // Mostrar los primeros 2 registros del duplicado\n    items.slice(0, 2).forEach((item, idx) => {\n      const data = item.json;\n    });\n    \n    exampleCount++;\n  }\n  \n  // Análisis de por qué se duplican\n  const duplicateAnalysis = new Map();\n  for (const [hash, items] of duplicates.entries()) {\n    const firstItem = items[0].json;\n    const key = `${firstItem.marca_normalizada}|${firstItem.modelo_normalizado}`;\n    \n    if (!duplicateAnalysis.has(key)) {\n      duplicateAnalysis.set(key, 0);\n    }\n    duplicateAnalysis.set(key, duplicateAnalysis.get(key) + 1);\n  }\n  \n  const sortedAnalysis = Array.from(duplicateAnalysis.entries())\n    .sort((a, b) => b[1] - a[1])\n    .slice(0, 10);\n  \n  sortedAnalysis.forEach(([key, count]) => {\n    console.log(`   ${key}: ${count} hashes duplicados`);\n  });\n}\n\n// Estadísticas finales\nconst finalItems = Array.from(uniqueByHash.values());\n\nreturn finalItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -576,
        544
      ],
      "id": "0a088bec-5780-4e65-8ed8-543b90b86f46",
      "name": "Deduplicate by Hash"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -976,
        736
      ],
      "id": "16e5a10b-20a9-4391-904f-9bc766ae2e89",
      "name": "Convert to File"
    }
  ],
  "pinData": {
    "When clicking ‘Execute workflow’": [
      {
        "json": {}
      }
    ]
  },
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Extract AXA Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Data": {
      "main": [
        [
          {
            "node": "Deduplicate by Hash",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deduplicate data": {
      "main": [
        [
          {
            "node": "Normalize Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract AXA Data": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deduplicate by Hash": {
      "main": [
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b78737e5-eb0d-4453-a4c2-f28ec324ad95",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "900709ac205bf412bdd7b3d4452073dce9dfbb650e50cd24da57187d1da44e89"
  },
  "id": "dmLff0u27vBHhS7n",
  "tags": []
}