{
  "name": "ETL - Atlas",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1376,
        544
      ],
      "id": "2df3e759-948c-4602-9933-7c27f5cbd09b",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "jsCode": "// ==========================================\n// ETL ATLAS v3.0 - NORMALIZACIÓN MEJORADA PARA N8N\n// Aseguradora: Atlas  \n// Fecha: 2025-08-28\n// Mejoras: Extracción de specs, doble hash, limpieza de prefijos\n// ==========================================\n\nconst crypto = require('crypto');\n\n// ==========================================\n// CONFIGURACIÓN\n// ==========================================\nconst ASEGURADORA = 'ATLAS';\nconst FECHA_PROCESO = new Date().toISOString();\n\n// ==========================================\n// DICCIONARIOS DE NORMALIZACIÓN\n// ==========================================\n\nconst SINONIMOS_MARCAS = {\n    'MERCEDES BENZ': 'MERCEDES-BENZ',\n    'MERCEDES': 'MERCEDES-BENZ',\n    'GENERAL MOTORS': 'CHEVROLET', // Default para GM\n    'KIA MOTORS': 'KIA',\n    'LAND ROVER': 'LAND ROVER',\n    'VW': 'VOLKSWAGEN',\n    'VOLKSWAGEN': 'VOLKSWAGEN',\n    'CHEV': 'CHEVROLET',\n    'CHEVY': 'CHEVROLET',\n    'GMC': 'GMC',\n    'ALFA': 'ALFA ROMEO',\n    'BMW': 'BMW',\n    'MINI': 'MINI',\n    'AUDI': 'AUDI',\n    'FORD': 'FORD',\n    'MAZDA': 'MAZDA',\n    'NISSAN': 'NISSAN',\n    'TOYOTA': 'TOYOTA',\n    'HONDA': 'HONDA',\n    'HYUNDAI': 'HYUNDAI',\n    'MITSUBISHI': 'MITSUBISHI',\n    'SUZUKI': 'SUZUKI',\n    'JEEP': 'JEEP',\n    'DODGE': 'DODGE',\n    'RAM': 'RAM',\n    'CHRYSLER': 'CHRYSLER',\n    'FIAT': 'FIAT',\n    'PEUGEOT': 'PEUGEOT',\n    'RENAULT': 'RENAULT',\n    'SEAT': 'SEAT',\n    'CUPRA': 'CUPRA',\n    'SUBARU': 'SUBARU',\n    'PORSCHE': 'PORSCHE',\n    'LEXUS': 'LEXUS',\n    'INFINITI': 'INFINITI',\n    'LINCOLN': 'LINCOLN',\n    'ACURA': 'ACURA',\n    'CADILLAC': 'CADILLAC',\n    'BUICK': 'BUICK',\n    'GWM': 'GREAT WALL',\n    'GREAT WALL': 'GREAT WALL',\n    'JAC': 'JAC',\n    'JMC': 'JMC',\n    'BYD': 'BYD',\n    'CHANGAN': 'CHANGAN',\n    'CHIREY': 'CHIREY',\n    'DONGFENG': 'DONGFENG',\n    'EXEED': 'EXEED',\n    'GAC': 'GAC',\n    'GEELY': 'GEELY',\n    'JAECOO': 'JAECOO',\n    'JETOUR': 'JETOUR',\n    'BESTUNE': 'BESTUNE',\n    'MCLAREN': 'MCLAREN',\n    'VOLVO': 'VOLVO',\n    'JAGUAR': 'JAGUAR'\n};\n\nconst TRANSMISION_BINARIA = {\n    'MANUAL': 'MANUAL',\n    'STD': 'MANUAL',\n    'ESTANDAR': 'MANUAL',\n    'MAN': 'MANUAL',\n    'MT': 'MANUAL',\n    'Manual': 'MANUAL',\n    '1': 'MANUAL',\n    \n    'AUTO': 'AUTO',\n    'AUT': 'AUTO',\n    'AUTOMATICA': 'AUTO',\n    'AUTOMÁTICA': 'AUTO',\n    'AUTOMATIC': 'AUTO',\n    'Automática': 'AUTO',\n    'AT': 'AUTO',\n    'TIPTRONIC': 'AUTO',\n    'S TRONIC': 'AUTO',\n    'STRONIC': 'AUTO',\n    'CVT': 'AUTO',\n    'CVTF': 'AUTO',\n    'DCT': 'AUTO',\n    'DUAL': 'AUTO',\n    'DSG': 'AUTO',\n    'PDK': 'AUTO',\n    '2': 'AUTO',\n    '3': 'AUTO',\n    '4': 'AUTO'\n};\n\nconst GUIONES_CANONICOS = [\n    'TYPE-S', 'A-SPEC', 'E-TECH', 'N-LINE', 'GT-LINE',\n    'X-LINE', 'R-LINE', 'S-LINE', 'M-SPORT', 'AMG-LINE',\n    'F-SPORT', 'GR-SPORT', 'RS-LINE', 'ST-LINE', 'CROSS-COUNTRY',\n    'ALL-TERRAIN', 'PLUG-IN', 'E-POWER', 'T-CROSS', 'T-ROC'\n];\n\n// ==========================================\n// FUNCIONES DE EXTRACCIÓN DE ESPECIFICACIONES\n// ==========================================\n\nfunction extraerEspecificacionesTecnicas(version, versionCorta, specsSQL = {}) {\n    const specs = {\n        configuracion_motor: specsSQL.configuracion_motor || null,\n        cilindrada_l: specsSQL.cilindrada_l || null,\n        traccion: specsSQL.traccion || null,\n        numero_puertas: specsSQL.numero_puertas || null,\n        tipo_carroceria: specsSQL.tipo_carroceria || null,\n        potencia_hp: specsSQL.potencia_hp || null,\n        numero_ocupantes: specsSQL.numero_ocupantes || null\n    };\n    \n    // Si ya tenemos specs del SQL, confiar en ellas pero buscar adicionales\n    const texto = `${version || ''} ${versionCorta || ''}`.toUpperCase();\n    \n    // Número de puertas (si no viene del SQL)\n    if (!specs.numero_puertas) {\n        const puertas = texto.match(/(\\d+)\\s*PTAS?\\b/) || texto.match(/(\\d+)P\\b/);\n        if (puertas) specs.numero_puertas = parseInt(puertas[1], 10);\n    }\n    \n    // Cilindrada (si no viene del SQL)\n    if (!specs.cilindrada_l) {\n        const cilindrada = texto.match(/(\\d+\\.?\\d*)\\s*[LT](?:\\s|$|[^A-Z])/);\n        if (cilindrada) specs.cilindrada_l = parseFloat(cilindrada[1]);\n    }\n    \n    // Tracción mejorada con sistemas propietarios\n    if (!specs.traccion) {\n        if (texto.includes('AWD') || texto.includes('QUATTRO') || \n            texto.includes('XDRIVE') || texto.includes('4MATIC') ||\n            texto.includes('4MOTION') || texto.includes('SYMMETRICAL AWD')) {\n            specs.traccion = 'AWD';\n        } else if (texto.includes('FWD')) {\n            specs.traccion = 'FWD';\n        } else if (texto.includes('RWD')) {\n            specs.traccion = 'RWD';\n        } else if (texto.includes('4X4') || texto.includes('4WD')) {\n            specs.traccion = '4WD';\n        }\n    }\n    \n    // Tipo de carrocería (si no viene del SQL)\n    if (!specs.tipo_carroceria) {\n        const carrocerias = {\n            'GRAN COUPE': 'GRAN COUPE',\n            'COUPE': 'COUPE',\n            'SEDAN': 'SEDAN',\n            'SUV': 'SUV',\n            'HATCHBACK': 'HATCHBACK',\n            'SPORTBACK': 'SPORTBACK',\n            'WAGON': 'WAGON',\n            'PICKUP': 'PICKUP',\n            'VAN': 'VAN',\n            'CONVERTIBLE': 'CONVERTIBLE',\n            'CROSSOVER': 'CROSSOVER',\n            'CABRIO': 'CONVERTIBLE',\n            'ROADSTER': 'ROADSTER'\n        };\n        \n        for (const [buscar, valor] of Object.entries(carrocerias)) {\n            if (texto.includes(buscar)) {\n                specs.tipo_carroceria = valor;\n                break;\n            }\n        }\n        \n        // Detectar HB como hatchback\n        if (!specs.tipo_carroceria && texto.match(/\\bHB\\b/)) {\n            specs.tipo_carroceria = 'HATCHBACK';\n        }\n    }\n    \n    // Configuración del motor (si no viene del SQL)\n    if (!specs.configuracion_motor) {\n        if (texto.includes(' EV ') || texto.includes(' BEV ') || texto.includes('ELECTRICO')) {\n            specs.configuracion_motor = 'ELECTRICO';\n        } else if (texto.includes(' PHEV ') || texto.includes('PLUG-IN')) {\n            specs.configuracion_motor = 'HIBRIDO_PLUG';\n        } else if (texto.includes(' HEV ') || texto.includes(' HYBRID ')) {\n            specs.configuracion_motor = 'HIBRIDO';\n        } else if (texto.includes('DIESEL') || texto.includes(' TDI ')) {\n            specs.configuracion_motor = 'DIESEL';\n        } else if (texto.includes('TURBO') || texto.match(/\\d+T\\b/) || \n                   texto.includes('TSI') || texto.includes('TFSI')) {\n            specs.configuracion_motor = 'TURBO';\n        } else if (texto.includes(' V8 ')) {\n            specs.configuracion_motor = 'V8';\n        } else if (texto.includes(' V6 ')) {\n            specs.configuracion_motor = 'V6';\n        } else if (texto.match(/\\b[L|I]4\\b/) || texto.includes('4CIL')) {\n            specs.configuracion_motor = 'L4';\n        } else if (texto.match(/\\b[L|I]3\\b/) || texto.includes('3CIL')) {\n            specs.configuracion_motor = 'L3';\n        } else if (texto.match(/\\b[L|I]6\\b/) || texto.includes('6CIL')) {\n            specs.configuracion_motor = 'L6';\n        }\n    }\n    \n    // Potencia (si no viene del SQL)\n    if (!specs.potencia_hp) {\n        const potencia = texto.match(/(\\d+)\\s*HP/);\n        if (potencia) specs.potencia_hp = parseInt(potencia[1], 10);\n    }\n    \n    // Número de ocupantes (si no viene del SQL)\n    if (!specs.numero_ocupantes) {\n        const ocupantes = texto.match(/(\\d+)\\s*(?:PAS|OCUP|PLAZAS)/);\n        if (ocupantes) {\n            specs.numero_ocupantes = parseInt(ocupantes[1], 10);\n        } else if (specs.numero_puertas) {\n            // Estimación basada en puertas\n            specs.numero_ocupantes = specs.numero_puertas === 2 ? 2 : 5;\n        }\n    }\n    \n    return specs;\n}\n\n// ==========================================\n// FUNCIONES DE LIMPIEZA Y NORMALIZACIÓN\n// ==========================================\n\nfunction limpiarPrefijos(version, marca, modelo) {\n    if (!version) return '';\n    \n    let versionLimpia = version.toUpperCase().trim();\n    const marcaUpper = marca ? marca.toUpperCase() : '';\n    const modeloUpper = modelo ? modelo.toUpperCase() : '';\n    \n    // Para GENERAL MOTORS, limpiar las marcas reales\n    if (marca === 'GENERAL MOTORS') {\n        const marcasGM = ['CHEVROLET', 'BUICK', 'CADILLAC', 'GMC'];\n        for (const marcaGM of marcasGM) {\n            if (versionLimpia.startsWith(marcaGM + ' ')) {\n                // Detectar la marca real para la normalización\n                if (marcaGM === 'CHEVROLET') {\n                    versionLimpia = versionLimpia.substring(10).trim(); // Quitar \"CHEVROLET \"\n                } else if (marcaGM === 'BUICK') {\n                    versionLimpia = versionLimpia.substring(6).trim(); // Quitar \"BUICK \"\n                } else if (marcaGM === 'CADILLAC') {\n                    versionLimpia = versionLimpia.substring(9).trim(); // Quitar \"CADILLAC \"\n                } else if (marcaGM === 'GMC') {\n                    versionLimpia = versionLimpia.substring(4).trim(); // Quitar \"GMC \"\n                }\n                break;\n            }\n        }\n    }\n    \n    // Para VOLKSWAGEN, limpiar \"VW\"\n    if (marca === 'VOLKSWAGEN' && versionLimpia.startsWith('VW ')) {\n        versionLimpia = versionLimpia.substring(3).trim();\n    }\n    \n    // Patrón 1: Código de 2 letras + marca + modelo\n    const patronCodigo = new RegExp('^[A-Z]{2}\\\\s+' + marcaUpper + '\\\\s+' + modeloUpper + '\\\\s+');\n    if (patronCodigo.test(versionLimpia)) {\n        versionLimpia = versionLimpia.replace(patronCodigo, '');\n    }\n    \n    // Patrón 2: Marca + modelo\n    const patronMarca = new RegExp('^' + marcaUpper + '\\\\s+' + modeloUpper + '\\\\s+');\n    if (patronMarca.test(versionLimpia)) {\n        versionLimpia = versionLimpia.replace(patronMarca, '');\n    }\n    \n    // Patrón 3: Solo modelo\n    const patronModelo = new RegExp('^' + modeloUpper + '\\\\s+');\n    if (patronModelo.test(versionLimpia)) {\n        versionLimpia = versionLimpia.replace(patronModelo, '');\n    }\n    \n    // Limpiar modelo del inicio si aparece nuevamente\n    if (modeloUpper && versionLimpia.startsWith(modeloUpper + ' ')) {\n        versionLimpia = versionLimpia.substring(modeloUpper.length + 1).trim();\n    }\n    \n    return versionLimpia.trim();\n}\n\nfunction normalizarMarca(marca, versionCompleta) {\n    if (!marca) return '';\n    \n    // Para GENERAL MOTORS, detectar la marca real desde la versión\n    if (marca === 'GENERAL MOTORS' && versionCompleta) {\n        const versionUpper = versionCompleta.toUpperCase();\n        if (versionUpper.startsWith('CHEVROLET')) return 'CHEVROLET';\n        if (versionUpper.startsWith('BUICK')) return 'BUICK';\n        if (versionUpper.startsWith('CADILLAC')) return 'CADILLAC';\n        if (versionUpper.startsWith('GMC')) return 'GMC';\n        return 'CHEVROLET'; // Default para GM\n    }\n    \n    let marcaNorm = marca.toUpperCase().trim();\n    marcaNorm = marcaNorm.replace(/[^\\w\\s-]/g, ' ').replace(/\\s+/g, ' ').trim();\n    \n    return SINONIMOS_MARCAS[marcaNorm] || marcaNorm;\n}\n\nfunction normalizarModelo(modelo, marca) {\n    if (!modelo) return '';\n    \n    let modeloNorm = modelo.toUpperCase().trim();\n    modeloNorm = modeloNorm.replace(/[^\\w\\s-]/g, ' ').replace(/\\s+/g, ' ').trim();\n    \n    // Limpiar redundancia: si el modelo empieza con la marca, eliminarla\n    if (marca && modeloNorm.startsWith(marca.toUpperCase() + ' ')) {\n        modeloNorm = modeloNorm.substring(marca.length + 1).trim();\n    }\n    \n    return modeloNorm;\n}\n\nfunction normalizarTransmision(codigoTransmision, descripcionTransmision, descripcionVersion) {\n    // Priorizar descripción sobre código\n    const desc = `${descripcionTransmision || ''} ${descripcionVersion || ''}`.toUpperCase();\n    \n    // Detectar patrones de transmisión en el texto\n    if (desc.match(/\\b(MANUAL|STD|MAN|MT|ESTANDAR)\\b/)) return 'MANUAL';\n    if (desc.match(/\\b(AUT|AUTO|AUTOMATICA|AUTOMÁTICA|AUTOMATIC|AT)\\b/)) return 'AUTO';\n    if (desc.match(/\\b(CVT|DCT|DSG|PDK|S TRONIC|STRONIC|TIPTRONIC)\\b/)) return 'AUTO';\n    \n    // Si no hay info en texto, usar código\n    const codigo = String(codigoTransmision);\n    return TRANSMISION_BINARIA[codigo] || 'AUTO';\n}\n\nfunction normalizarVersion(versionCompleta, versionCorta, marca, modelo, transmisionNorm) {\n    if (!versionCompleta && !versionCorta) return 'STANDARD';\n    \n    // Limpiar prefijos\n    let versionBase = limpiarPrefijos(versionCompleta || versionCorta, marca, modelo);\n    \n    // Si queda vacío después de limpiar, usar version corta\n    if (!versionBase && versionCorta) {\n        versionBase = versionCorta.toUpperCase().trim();\n    }\n    \n    if (!versionBase) return 'STANDARD';\n    \n    // Limpiar transmisión y extras del final\n    versionBase = versionBase\n        .replace(/\\b(AUT|AUTOMATICA|AUTOMATIC|AUTO|MANUAL|STD|CVT|DCT|DSG|PDK)\\b/gi, '')\n        .replace(/\\s+/g, ' ')\n        .trim();\n    \n    // Aplicar guiones canónicos\n    GUIONES_CANONICOS.forEach(termino => {\n        const sinGuion = termino.replace('-', '');\n        const regex = new RegExp('\\\\b' + sinGuion + '\\\\b', 'gi');\n        versionBase = versionBase.replace(regex, termino);\n    });\n    \n    // Limpiar extras de equipamiento comunes\n    const extras = [\n        'PIEL', 'TELA', 'QUEMACOCOS', 'SUNROOF', 'NAVEGACION', 'GPS',\n        'CAMARA', 'SENSORES', 'BLUETOOTH', 'USB', 'ANDROID', 'CARPLAY',\n        'BOSE', 'HARMAN', 'SOUND', 'AUDIO', 'PREMIUM', 'LUXURY'\n    ];\n    \n    extras.forEach(extra => {\n        versionBase = versionBase.replace(new RegExp('\\\\b' + extra + '\\\\b', 'gi'), '');\n    });\n    \n    // Limpiar espacios múltiples\n    versionBase = versionBase.replace(/\\s+/g, ' ').trim();\n    \n    return versionBase || 'STANDARD';\n}\n\n// ==========================================\n// FUNCIONES DE GENERACIÓN DE HASHES\n// ==========================================\n\nfunction generarHashComercial(marca, modelo, año, version, transmision) {\n    const componentes = [\n        marca.toUpperCase().trim(),\n        modelo.toUpperCase().trim(),\n        String(año),\n        version.toUpperCase().trim(),\n        transmision.toUpperCase().trim()\n    ];\n    \n    const stringParaHash = componentes.join('|');\n    return crypto.createHash('sha256').update(stringParaHash).digest('hex');\n}\n\nfunction generarHashTecnico(marca, modelo, año, version, transmision, specs) {\n    const specsOrdenadas = [\n        specs.configuracion_motor || '',\n        specs.cilindrada_l ? String(specs.cilindrada_l) : '',\n        specs.traccion || '',\n        specs.numero_puertas ? String(specs.numero_puertas) : '',\n        specs.tipo_carroceria || '',\n        specs.potencia_hp ? String(specs.potencia_hp) : '',\n        specs.numero_ocupantes ? String(specs.numero_ocupantes) : ''\n    ];\n    \n    const stringParaHash = [\n        marca.toUpperCase().trim(),\n        modelo.toUpperCase().trim(),\n        String(año),\n        version.toUpperCase().trim(),\n        transmision.toUpperCase().trim(),\n        ...specsOrdenadas\n    ].join('|');\n    \n    return crypto.createHash('sha256').update(stringParaHash).digest('hex');\n}\n\nfunction generarSpecSignature(specs) {\n    const partes = [];\n    \n    if (specs.configuracion_motor) partes.push(specs.configuracion_motor);\n    if (specs.cilindrada_l) partes.push(`${specs.cilindrada_l}L`);\n    if (specs.traccion) partes.push(specs.traccion);\n    if (specs.numero_puertas) partes.push(`${specs.numero_puertas}P`);\n    if (specs.tipo_carroceria) partes.push(specs.tipo_carroceria);\n    if (specs.potencia_hp) partes.push(`${specs.potencia_hp}HP`);\n    if (specs.numero_ocupantes) partes.push(`${specs.numero_ocupantes}PAX`);\n    \n    return partes.join('-') || 'BASE';\n}\n\n// ==========================================\n// PROCESAMIENTO PRINCIPAL\n// ==========================================\n\nconst inputData = $input.all();\nconst registros = [];\nconst rechazados = [];\nconst estadisticas = {\n    total: inputData.length,\n    validos: 0,\n    rechazados: 0,\n    conSpecs: 0,\n    conTodasSpecs: 0,\n    specsExtraidas: {\n        configuracion_motor: 0,\n        cilindrada_l: 0,\n        traccion: 0,\n        numero_puertas: 0,\n        tipo_carroceria: 0,\n        potencia_hp: 0,\n        numero_ocupantes: 0\n    }\n};\n\nconsole.log(`\\n🚀 Iniciando procesamiento ${ASEGURADORA} v3.0`);\nconsole.log(`   Registros a procesar: ${inputData.length}`);\n\nfor (const item of inputData) {\n    const data = item.json;\n    \n    // Validación estricta de campos obligatorios\n    if (!data.marca || !data.modelo || !data.año || \n        !data.version_completa || data.transmision_codigo === null) {\n        rechazados.push({\n            registro: data,\n            razon: `Faltan campos obligatorios: ${!data.marca ? 'marca ' : ''}${!data.modelo ? 'modelo ' : ''}${!data.año ? 'año ' : ''}${!data.version_completa ? 'version ' : ''}${data.transmision_codigo === null ? 'transmision' : ''}`\n        });\n        estadisticas.rechazados++;\n        continue;\n    }\n    \n    // Normalización de marca\n    const marcaNormalizada = normalizarMarca(data.marca, data.version_completa);\n    \n    // Normalización de modelo\n    const modeloNormalizado = normalizarModelo(data.modelo, marcaNormalizada);\n    \n    // Normalización de transmisión (binaria)\n    const transmisionNormalizada = normalizarTransmision(\n        data.transmision_codigo,\n        data.transmision_descripcion,\n        data.version_completa\n    );\n    \n    // Normalización de versión\n    const versionNormalizada = normalizarVersion(\n        data.version_completa,\n        data.version_corta,\n        marcaNormalizada,\n        modeloNormalizado,\n        transmisionNormalizada\n    );\n    \n    // Extracción de especificaciones técnicas (combinando SQL y JS)\n    const specsSQL = {\n        configuracion_motor: data.configuracion_motor,\n        cilindrada_l: data.cilindrada_l,\n        traccion: data.traccion,\n        numero_puertas: data.numero_puertas,\n        tipo_carroceria: data.tipo_carroceria,\n        potencia_hp: data.potencia_hp,\n        numero_ocupantes: data.numero_ocupantes\n    };\n    \n    const specs = extraerEspecificacionesTecnicas(\n        data.version_completa,\n        data.version_corta,\n        specsSQL\n    );\n    \n    // Contar especificaciones extraídas\n    let specsCount = 0;\n    for (const [key, value] of Object.entries(specs)) {\n        if (value !== null) {\n            specsCount++;\n            estadisticas.specsExtraidas[key]++;\n        }\n    }\n    \n    if (specsCount > 0) estadisticas.conSpecs++;\n    if (specsCount === 7) estadisticas.conTodasSpecs++;\n    \n    // Generar spec signature\n    const specSignature = generarSpecSignature(specs);\n    \n    // Generar hashes\n    const hashComercial = generarHashComercial(\n        marcaNormalizada,\n        modeloNormalizado,\n        data.año,\n        versionNormalizada,\n        transmisionNormalizada\n    );\n    \n    const hashTecnico = generarHashTecnico(\n        marcaNormalizada,\n        modeloNormalizado,\n        data.año,\n        versionNormalizada,\n        transmisionNormalizada,\n        specs\n    );\n    \n    // Crear registro de salida para public.catalogo_homologado\n    const registro = {\n        // Hashes\n        hash_comercial: hashComercial,\n        hash_tecnico: hashTecnico,\n        \n        // Datos fuente (sin normalizar)\n        marca: data.marca,\n        modelo: data.modelo,\n        año: data.año,\n        version: data.version_completa,\n        version_corta: data.version_corta || null,\n        transmision_codigo: data.transmision_codigo,\n        transmision_descripcion: data.transmision_descripcion,\n        \n        // Normalizados (comerciales)\n        marca_normalizada: marcaNormalizada,\n        modelo_normalizado: modeloNormalizado,\n        version_normalizada: versionNormalizada,\n        transmision_normalizada: transmisionNormalizada,\n        \n        // Especificaciones técnicas\n        configuracion_motor: specs.configuracion_motor,\n        cilindrada_l: specs.cilindrada_l,\n        traccion: specs.traccion,\n        numero_puertas: specs.numero_puertas,\n        tipo_carroceria: specs.tipo_carroceria,\n        potencia_hp: specs.potencia_hp,\n        numero_ocupantes: specs.numero_ocupantes,\n        spec_signature: specSignature,\n        \n        // Metadata\n        aseguradoras_disponibles: {\n            [ASEGURADORA]: {\n                id_original: data.id_original,\n                activo: data.activo,\n                fecha_actualizacion: data.fecha_actualizacion\n            }\n        },\n        catalogo_marca_id: data.catalogo_marca_id,\n        catalogo_modelo_id: data.catalogo_modelo_id,\n        \n        // Componentes de los hashes para auditoría\n        hash_components_comercial: {\n            marca: marcaNormalizada,\n            modelo: modeloNormalizado,\n            año: String(data.año),\n            version: versionNormalizada,\n            transmision: transmisionNormalizada\n        },\n        hash_components_tecnico: {\n            marca: marcaNormalizada,\n            modelo: modeloNormalizado,\n            año: String(data.año),\n            version: versionNormalizada,\n            transmision: transmisionNormalizada,\n            specs: specs\n        }\n    };\n    \n    registros.push(registro);\n    estadisticas.validos++;\n}\n\n// Retornar los registros procesados para n8n\nreturn registros;"
      },
      "id": "d286a5a1-40d7-43db-8060-cbfb146c39fb",
      "name": "Normalize Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -784,
        544
      ]
    },
    {
      "parameters": {
        "jsCode": "// Nodo: Deduplicate Source Data\nconst items = $input.all();\nconst seen = new Map();\n\nfor (const item of items) {\n  const key = `${item.json.marca}|${item.json.modelo}|${item.json.año}|${item.json.version_completa}`;\n  \n  if (!seen.has(key) || item.json.fecha_actualizacion > seen.get(key).json.fecha_actualizacion) {\n    seen.set(key, item);\n  }\n}\n\nreturn Array.from(seen.values());"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -976,
        544
      ],
      "id": "b322bcb8-c6f1-48ba-8483-8b657d18554a",
      "name": "Deduplicate data"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- =====================================================\n-- QUERY DE EXTRACCIÓN PARA ATLAS\n-- Activos: ~31,229 registros (confirmado)\n-- Transmisión: 1=MANUAL, 2=AUTO, 0=NULL\n-- CRÍTICO: Incluir año y todas las llaves en JOINs\n-- =====================================================\nSELECT \n    'ATLAS' as origen_aseguradora,\n    CAST(v.IdVersion as VARCHAR(50)) as id_original,\n    UPPER(LTRIM(RTRIM(m.NomMarca))) as marca,\n    UPPER(LTRIM(RTRIM(s.Descripcion))) as modelo,\n    v.Anio as anio,\n    v.Descripcion as version_original,\n    CASE \n        WHEN v.Transmision = 2 THEN 'AUTO'\n        WHEN v.Transmision = 1 THEN 'MANUAL'\n        ELSE NULL\n    END as transmision,\n    CAST(v.Activo as INT) as activo\nFROM atlas.Vehiculo_Version v\nINNER JOIN atlas.Marca m ON v.IdMarca = m.IdMarca\n    AND v.Anio = m.Anio\n    AND v.Categoria = m.Categoria\n    AND v.Liga = m.Liga\nINNER JOIN atlas.SubTipo_Modelo s ON v.IdSubTipo = s.IdSubTipo\n    AND v.Anio = s.Anio\n    AND v.IdMarca = s.IdMarca\n    AND v.Categoria = s.Categoria\n    AND v.Liga = s.Liga\nWHERE v.Activo = 1\n    AND v.Anio BETWEEN 2000 AND 2030\nORDER BY m.NomMarca, s.Descripcion, v.Anio;"
      },
      "id": "43648a38-5b0b-4f6c-9ff4-a55441c55c4f",
      "name": "Extract Atlas Data",
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1,
      "position": [
        -1184,
        544
      ],
      "retryOnFail": true,
      "waitBetweenTries": 3000,
      "credentials": {
        "microsoftSql": {
          "id": "LxcRbE0XllWrNCsR",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Nodo: Deduplicate by Hash - v3.0 con hash_tecnico\nconst items = $input.all();\nconst uniqueByHash = new Map();\nconst duplicates = new Map();\n\n// Procesar todos los items\nitems.forEach(item => {\n  const hash = item.json.hash_tecnico; // CAMBIO: usar hash_tecnico\n  \n  if (!hash) {\n    console.log('⚠️ Registro sin hash_tecnico:', item.json);\n    return;\n  }\n  \n  if (uniqueByHash.has(hash)) {\n    // Contar duplicados\n    if (!duplicates.has(hash)) {\n      duplicates.set(hash, [uniqueByHash.get(hash)]);\n    }\n    duplicates.set(hash, [...duplicates.get(hash), item]);\n  } else {\n    uniqueByHash.set(hash, item);\n  }\n});\n\n// Reportar duplicados encontrados\nif (duplicates.size > 0) {\n  console.log(`\\n⚠️ Duplicados encontrados: ${duplicates.size} hashes con múltiples registros`);\n}\n\nconst finalItems = Array.from(uniqueByHash.values());\nconsole.log(`✅ Registros únicos: ${finalItems.length}`);\n\nreturn finalItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -576,
        544
      ],
      "id": "bf46ed83-8302-4a98-985a-655bdca1605a",
      "name": "Deduplicate by Hash"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -976,
        768
      ],
      "id": "25ee45ec-dd0a-421c-9317-78dcd78987f5",
      "name": "Convert to File"
    }
  ],
  "pinData": {
    "When clicking ‘Execute workflow’": [
      {
        "json": {}
      }
    ]
  },
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Extract Atlas Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Data": {
      "main": [
        [
          {
            "node": "Deduplicate by Hash",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deduplicate data": {
      "main": [
        [
          {
            "node": "Normalize Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Atlas Data": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deduplicate by Hash": {
      "main": [
        []
      ]
    },
    "Convert to File": {
      "main": [
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "a0bb34db-4265-4b70-9de2-badc836bc8aa",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "900709ac205bf412bdd7b3d4452073dce9dfbb650e50cd24da57187d1da44e89"
  },
  "id": "re1RY2Vr95OtBoAW",
  "tags": []
}