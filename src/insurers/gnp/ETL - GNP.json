{
  "name": "ETL - GNP",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1376,
        544
      ],
      "id": "5e736a35-b1a9-4faa-a5bb-ba0431527b03",
      "name": "When clicking ‚ÄòExecute workflow‚Äô"
    },
    {
      "parameters": {
        "jsCode": "// ETL GNP - NORMALIZACI√ìN\nconst crypto = require('crypto');\nconst ASEGURADORA = 'GNP';\n\n// DICCIONARIO EXPANDIDO DE MARCAS\nconst MARCAS_CANONICAS = {\n    // Alemanas Premium\n    'MERCEDES-BENZ': ['MERCEDES', 'MERCEDES BENZ', 'BENZ', 'MB'],\n    'BMW': ['BMW', 'BAYERISCHE MOTOREN WERKE', 'B.M.W.'],\n    'AUDI': ['AUDI', 'AU'],\n    'PORSCHE': ['PORSCHE', 'POR'],\n    'VOLKSWAGEN': ['VW', 'VOLKS', 'VOLKSWAGON', 'V.W.'],\n    'MINI': ['MINI', 'MINI COOPER'],\n    \n    // Americanas\n    'CHEVROLET': ['CHEVY', 'CHEV', 'GM', 'GENERAL MOTORS', 'CHEVROLET'],\n    'FORD': ['FORD', 'FORD MOTOR', 'FMC'],\n    'CHRYSLER': ['CHRYSLER', 'CHR'],\n    'NISSAN': ['NISSAN', 'DATSUN', 'NISS', 'NIS'],\n    'DODGE': ['DODGE', 'DOD'],\n    'JEEP': ['JEEP', 'JEP'],\n    'RAM': ['RAM', 'DODGE RAM'],\n    'CADILLAC': ['CADILLAC', 'CAD'],\n    'BUICK': ['BUICK', 'BUI'],\n    'GMC': ['GMC', 'GENERAL MOTORS CORP'],\n    'LINCOLN': ['LINCOLN', 'LIN'],\n    'TESLA': ['TESLA', 'TES'],\n    \n    // Japonesas\n    'TOYOTA': ['TOYOTA', 'TOY', 'TOYOT'],\n    'HONDA': ['HONDA', 'HDA', 'HON'],\n    'MAZDA': ['MAZDA', 'MZD', 'MAZ'],\n    'MITSUBISHI': ['MITSUBISHI', 'MIT', 'MITS', 'MITSU'],\n    'SUZUKI': ['SUZUKI', 'SZK', 'SUZ'],\n    'SUBARU': ['SUBARU', 'SUB'],\n    'INFINITI': ['INFINITI', 'INF'],\n    'LEXUS': ['LEXUS', 'LEX'],\n    'ACURA': ['ACURA', 'ACU'],\n    \n    // Coreanas\n    'KIA': ['KIA', 'KIA MOTORS', 'KI'],\n    'HYUNDAI': ['HYUNDAI', 'HYU', 'HYUN'],\n    \n    // Europeas Premium\n    'LAND-ROVER': ['LAND ROVER', 'LANDROVER', 'LR'],\n    'JAGUAR': ['JAGUAR', 'JAG'],\n    'ROLLS-ROYCE': ['ROLLS', 'ROLLS ROYCE'],\n    'BENTLEY': ['BENTLEY', 'BEN'],\n    'ASTON-MARTIN': ['ASTON', 'ASTON MARTIN'],\n    'MASERATI': ['MASERATI', 'MAS'],\n    'FERRARI': ['FERRARI', 'FER'],\n    'LAMBORGHINI': ['LAMBORGHINI', 'LAMBO', 'LAM'],\n    'MCLAREN': ['MCLAREN', 'MCL'],\n    \n    // Europeas Populares\n    'SEAT': ['SEAT', 'ST'],\n    'PEUGEOT': ['PEUGEOT', 'PGT', 'PEUG'],\n    'RENAULT': ['RENAULT', 'RNT', 'REN'],\n    'FIAT': ['FIAT', 'FIA'],\n    'ALFA-ROMEO': ['ALFA', 'ALFA ROMEO'],\n    'VOLVO': ['VOLVO', 'VOL'],\n    \n    // Chinas Emergentes\n    'BYD': ['BYD', 'BUILD YOUR DREAMS'],\n    'GREAT-WALL': ['GREAT WALL', 'GREAT WALL MOTORS', 'GWM'],\n    'GEELY': ['GEELY', 'GEE'],\n    'HAVAL': ['HAVAL', 'HAV'],\n    'CHANGAN': ['CHANGAN', 'CHA'],\n    'JAC': ['JAC', 'JIANGHUAI'],\n    'DFSK': ['DFSK', 'DONGFENG SOKON'],\n    'BAIC': ['BAIC', 'BEIJING AUTO'],\n    \n    // Especiales\n    'CBO': ['CBO'],\n    'ESPECIAL': ['ESPECIAL', 'ESP'],\n    'MULTIMARCA': ['MULTIMARCA', 'MULTI']\n};\n\nconst MAPA_TRANSMISIONES = {\n    'Manual': 'MANUAL',\n    'Autom√°tica': 'AUTO',\n    'CVT': 'CVT',\n    'DCT': 'DCT',\n    'No especificada': 'NO_ESPECIFICADA'\n};\n\n// FUNCIONES DE NORMALIZACI√ìN\nfunction normalizarTexto(texto) {\n    if (!texto) return '';\n    return String(texto)\n        .toUpperCase()\n        .normalize('NFD')\n        .replace(/[\\u0300-\\u036f]/g, '')\n        .replace(/[^A-Z0-9\\s]/g, '')\n        .replace(/\\s+/g, ' ')\n        .trim();\n}\n\nfunction normalizarMarca(marca) {\n    if (!marca) return '';\n    const marcaNormalizada = normalizarTexto(marca);\n    \n    for (const [canonical, sinonimos] of Object.entries(MARCAS_CANONICAS)) {\n        if (sinonimos.includes(marcaNormalizada) || marcaNormalizada === canonical.replace('-', ' ')) {\n            return canonical;\n        }\n    }\n    return marcaNormalizada;\n}\n\nfunction normalizarVersion(version) {\n    if (!version) return '';\n    return String(version)\n        .toUpperCase()\n        .normalize('NFD')\n        .replace(/[\\u0300-\\u036f]/g, '')\n        // Eliminar informaci√≥n t√©cnica espec√≠fica de GNP\n        .replace(/\\bL\\d+\\b/gi, '')                    // L4, L6\n        .replace(/\\b[VI]\\d+\\b/gi, '')                 // V6, V8, I4\n        .replace(/\\b\\d+\\.\\d+\\b/gi, '')                // 1.5, 2.0, 2.4, 3.5\n        .replace(/\\b\\d+\\s*CIL\\.?\\b/gi, '')            // 4 CIL\n        .replace(/\\bAUT\\b/gi, '')                     // AUT (autom√°tica)\n        .replace(/\\bSTD\\b/gi, '')                     // STD (est√°ndar/manual)\n        .replace(/\\bAC\\b/gi, '')                      // AC (aire acondicionado)\n        .replace(/\\bVE\\b/gi, '')                      // VE\n        .replace(/\\bQC\\b/gi, '')                      // QC\n        .replace(/\\bCA\\b/gi, '')                      // C/A (con aire)\n        .replace(/\\bCON\\s*AIRE\\b/gi, '')              // CON AIRE\n        .replace(/\\bCON\\s*A\\b/gi, '')                 // CON A\n        .replace(/[^A-Z0-9\\s-]/g, '')\n        .replace(/\\s+/g, ' ')\n        .trim();\n}\n\nfunction normalizarVersionUniversal(versionCompleta, versionCorta, transmisionNorm) {\n    const versionParaNormalizar = (versionCorta && \n                                   versionCorta.trim() !== '' && \n                                   versionCorta !== versionCompleta) \n                                   ? versionCorta : versionCompleta;\n    \n    let versionNorm = normalizarVersion(versionParaNormalizar);\n    \n    // Extraer versiones comunes de GNP\n    const patrones = [\n        /\\b(TECH|TECHNOLOGY)\\b/gi,\n        /\\b(A\\s*SPEC|ASPEC)\\b/gi,\n        /\\b(TYPE\\s*S|TYPES)\\b/gi,\n        /\\b(ADVANCE|ADVANCED)\\b/gi,\n        /\\b(SPORT|SPORTY)\\b/gi,\n        /\\b(PREMIUM|PREM)\\b/gi,\n        /\\b(LUXURY|LUX)\\b/gi,\n        /\\b(BASE|BASICO)\\b/gi,\n        /\\b(ELITE|ELI)\\b/gi,\n        /\\b(LIMITED|LTD)\\b/gi,\n        /\\b(TURBO)\\b/gi,\n        /\\b(HYBRID|HIBRIDO)\\b/gi\n    ];\n    \n    for (const patron of patrones) {\n        const match = versionNorm.match(patron);\n        if (match) {\n            let version = match[0].toUpperCase().replace(/\\s+/g, '-');\n            if (version.includes('TECH')) return 'TECH';\n            if (version.includes('A-SPEC') || version.includes('ASPEC')) return 'A-SPEC';\n            if (version.includes('TYPE-S') || version.includes('TYPES')) return 'TYPE-S';\n            if (version.includes('ADVANCE')) return 'ADVANCE';\n            if (version.includes('SPORT')) return 'SPORT';\n            if (version.includes('PREMIUM') || version.includes('PREM')) return 'PREMIUM';\n            if (version.includes('LUXURY') || version.includes('LUX')) return 'LUXURY';\n            if (version.includes('BASE') || version.includes('BASICO')) return 'BASE';\n            if (version.includes('ELITE') || version.includes('ELI')) return 'ELITE';\n            if (version.includes('LIMITED') || version.includes('LTD')) return 'LIMITED';\n            if (version.includes('TURBO')) return 'TURBO';\n            if (version.includes('HYBRID') || version.includes('HIBRIDO')) return 'HYBRID';\n            return version;\n        }\n    }\n    \n    const palabras = versionNorm.split(' ').filter(p => p.length > 2);\n    return palabras.length > 0 ? palabras[0] : 'STANDARD';\n}\n\nfunction normalizarTransmision(transmisionDesc) {\n    if (!transmisionDesc) return 'NO_ESPECIFICADA';\n    return MAPA_TRANSMISIONES[transmisionDesc] || 'NO_ESPECIFICADA';\n}\n\nfunction generarHash(...componentes) {\n    const textoHash = componentes\n        .map(c => String(c || '').toUpperCase().trim())\n        .join('|');\n    \n    return crypto\n        .createHash('sha256')\n        .update(textoHash, 'utf8')\n        .digest('hex');\n}\n\n// PROCESAMIENTO PRINCIPAL\nconst items = $input.all();\nconst registros = [];\nconst fechaProceso = new Date().toISOString();\n\nconsole.log(`üîÑ Iniciando normalizaci√≥n ${ASEGURADORA}: ${items.length} registros`);\n\nfor (const item of items) {\n    const data = item.json;\n    \n    if (!data.marca || !data.modelo || !data.a√±o) {\n        console.log(`‚ö†Ô∏è Registro sin datos b√°sicos: ${JSON.stringify(data)}`);\n        continue;\n    }\n    \n    const marcaNormalizada = normalizarMarca(data.marca);\n    const modeloNormalizado = normalizarTexto(data.modelo);\n    const transmisionNormalizada = normalizarTransmision(data.transmision_descripcion);\n    \n    const versionNormalizada = normalizarVersionUniversal(\n        data.version_completa, \n        data.version_corta, \n        transmisionNormalizada\n    );\n    \n    const versionCortaNormalizada = data.version_corta ? \n        normalizarVersionUniversal(data.version_corta, null, transmisionNormalizada) : \n        versionNormalizada;\n    \n    const hashUnico = generarHash(\n        marcaNormalizada,\n        modeloNormalizado,\n        data.a√±o,\n        versionNormalizada,\n        transmisionNormalizada\n    );\n    \n    const registro = {\n        hash_unico: hashUnico,\n        marca: data.marca,\n        modelo: data.modelo,\n        a√±o: data.a√±o,\n        version: data.version_completa,\n        version_corta: data.version_corta || null,\n        transmision_codigo: data.transmision_codigo,\n        transmision_descripcion: data.transmision_descripcion,\n        transmision_normalizada: transmisionNormalizada,\n        marca_normalizada: marcaNormalizada,\n        modelo_normalizado: modeloNormalizado,\n        version_normalizada: versionNormalizada,\n        version_corta_normalizada: versionCortaNormalizada,\n        catalogo_marca_id: data.catalogo_marca_id,\n        catalogo_modelo_id: data.catalogo_modelo_id,\n        origen_carga: 'etl_gnp_batch',\n        fecha_proceso: fechaProceso,\n        aseguradora_data: {\n            aseguradora: 'GNP',\n            id_original: data.id_original,\n            activo: data.activo !== undefined ? data.activo : 1,\n            fecha_actualizacion: data.fecha_actualizacion\n        },\n        hash_components: {\n            marca: marcaNormalizada,\n            modelo: modeloNormalizado,\n            a√±o: data.a√±o.toString(),\n            version: versionNormalizada,\n            transmision: transmisionNormalizada\n        }\n    };\n    \n    registros.push(registro);\n}\n\nreturn registros;"
      },
      "id": "bae2b2c6-40c1-4de1-ada0-7d1a9fa9a228",
      "name": "Normalize Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -784,
        544
      ]
    },
    {
      "parameters": {
        "jsCode": "// Nodo: Deduplicate Source Data\nconst items = $input.all();\nconst seen = new Map();\n\nfor (const item of items) {\n  const key = `${item.json.marca}|${item.json.modelo}|${item.json.a√±o}|${item.json.version_completa}`;\n  \n  if (!seen.has(key) || item.json.fecha_actualizacion > seen.get(key).json.fecha_actualizacion) {\n    seen.set(key, item);\n  }\n}\n\nreturn Array.from(seen.values());"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -976,
        544
      ],
      "id": "8f4c091b-9b6a-4485-9b2e-8ef6f95ebde5",
      "name": "Deduplicate data"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- =====================================================\n-- QUERY DE EXTRACCI√ìN PARA GNP\n-- Registros esperados: ~39,821 (expandidos por a√±os)\n-- Versiones √∫nicas: 11,674\n-- Transmisi√≥n: 1=MANUAL, 2=AUTO, 0=NULL\n-- NOTA: Una versi√≥n puede tener m√∫ltiples a√±os\n-- =====================================================\nSELECT \n    'GNP' as origen_aseguradora,\n    CAST(v.IdVersion as VARCHAR(50)) + \n        CASE \n            WHEN m.Clave IS NOT NULL THEN '_' + m.Clave \n            ELSE '' \n        END as id_original,\n    UPPER(LTRIM(RTRIM(a.Armadora))) as marca,\n    UPPER(LTRIM(RTRIM(c.Carroceria))) as modelo,\n    TRY_CAST(m.Clave as INT) as anio,\n    v.Version as version_original,\n    CASE \n        WHEN v.Transmision = 2 THEN 'AUTO'\n        WHEN v.Transmision = 1 THEN 'MANUAL'\n        ELSE NULL\n    END as transmision,\n    1 as activo\nFROM gnp.Version v\nLEFT JOIN gnp.Armadora a ON v.ClaveArmadora = a.Clave\nLEFT JOIN gnp.Carroceria c ON v.ClaveCarroceria = c.Clave \n    AND v.ClaveArmadora = c.ClaveArmadora\nLEFT JOIN gnp.Modelo m ON m.ClaveCarroceria = v.ClaveCarroceria\n    AND m.ClaveArmadora = v.ClaveArmadora\n    AND m.ClaveVersion = v.Clave\n    AND TRY_CAST(m.Clave as INT) BETWEEN 2000 AND 2030\nWHERE v.IdVersion IS NOT NULL\nORDER BY v.IdVersion, m.Clave;"
      },
      "id": "0822d857-c8ed-4aad-b977-1f80a1b2a865",
      "name": "Extract GNP Data",
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1,
      "position": [
        -1184,
        544
      ],
      "credentials": {
        "microsoftSql": {
          "id": "LxcRbE0XllWrNCsR",
          "name": "Microsoft SQL account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Nodo: Deduplicate by Hash - CR√çTICO para evitar duplicados\nconst items = $input.all();\nconst uniqueByHash = new Map();\nconst duplicates = new Map();\n\n// Procesar todos los items\nitems.forEach(item => {\n  const hash = item.json.hash_unico;\n  \n  if (!hash) {\n    return;\n  }\n  \n  if (uniqueByHash.has(hash)) {\n    // Contar duplicados\n    if (!duplicates.has(hash)) {\n      duplicates.set(hash, [uniqueByHash.get(hash)]);\n    }\n    duplicates.set(hash, [...duplicates.get(hash), item]);\n  } else {\n    uniqueByHash.set(hash, item);\n  }\n});\n\n// Reportar duplicados encontrados\nif (duplicates.size > 0) {  \n  // Mostrar ejemplos de duplicados\n  let exampleCount = 0;\n  for (const [hash, items] of duplicates.entries()) {\n    if (exampleCount >= 5) break;\n    \n    console.log(`\\nüîç Hash duplicado: ${hash.substring(0, 16)}...`);\n    console.log(`   Registros: ${items.length}`);\n    \n    // Mostrar los primeros 2 registros del duplicado\n    items.slice(0, 2).forEach((item, idx) => {\n      const data = item.json;\n    });\n    \n    exampleCount++;\n  }\n  \n  // An√°lisis de por qu√© se duplican\n  const duplicateAnalysis = new Map();\n  for (const [hash, items] of duplicates.entries()) {\n    const firstItem = items[0].json;\n    const key = `${firstItem.marca_normalizada}|${firstItem.modelo_normalizado}`;\n    \n    if (!duplicateAnalysis.has(key)) {\n      duplicateAnalysis.set(key, 0);\n    }\n    duplicateAnalysis.set(key, duplicateAnalysis.get(key) + 1);\n  }\n  \n  const sortedAnalysis = Array.from(duplicateAnalysis.entries())\n    .sort((a, b) => b[1] - a[1])\n    .slice(0, 10);\n  \n  sortedAnalysis.forEach(([key, count]) => {\n    console.log(`   ${key}: ${count} hashes duplicados`);\n  });\n}\n\n// Estad√≠sticas finales\nconst finalItems = Array.from(uniqueByHash.values());\n\nreturn finalItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -576,
        544
      ],
      "id": "44c8fe84-11de-4ec0-b308-84ad68e43765",
      "name": "Deduplicate by Hash"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -976,
        752
      ],
      "id": "c5b48085-3b36-4b24-8de8-261b44d4fff7",
      "name": "Convert to File"
    }
  ],
  "pinData": {
    "When clicking ‚ÄòExecute workflow‚Äô": [
      {
        "json": {}
      }
    ]
  },
  "connections": {
    "When clicking ‚ÄòExecute workflow‚Äô": {
      "main": [
        [
          {
            "node": "Extract GNP Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Data": {
      "main": [
        [
          {
            "node": "Deduplicate by Hash",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deduplicate data": {
      "main": [
        [
          {
            "node": "Normalize Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract GNP Data": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deduplicate by Hash": {
      "main": [
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "0a138441-e4a2-471e-9894-da39bdf131c4",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "900709ac205bf412bdd7b3d4452073dce9dfbb650e50cd24da57187d1da44e89"
  },
  "id": "SbUH75IlchTxZ6vj",
  "tags": []
}